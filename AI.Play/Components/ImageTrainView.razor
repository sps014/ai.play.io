@inject IJSRuntime Runtime
<div class="col-md-4" style="padding-top: 20px;">
    <div class="card text-center">
        <div class="card-header">
            <h5>Train</h5>
        </div>
        <div class="card-body">
            <h7 class="card-title">Total @imagesCount Images To Train On.</h7>
            <p class="card-text">
                <br />
            </p>
            @if (!IsModelLoaded)
            {
                <button class="btn btn-danger" type="button" disabled>
                    <span class="spinner-border spinner-border-sm"
                          aria-hidden="true"
                          role="status"></span>
                    Fetching Model...
                </button>
            }
            else
            {
                var valid = true && ImageClassView.Classes.Count >= 2;
                ImageClassContainer Class = null;
                foreach (var item in ImageClassView.Classes)
                {
                    if (item.Images.Count <= 1)
                    {
                        valid = false;
                        Class = item;
                        break;
                    }
                }
                if (valid)
                {
                    if (IsImageAddedBegin)
                    {
                        <button class="btn btn-warning">Processed @imageAddedCount Images</button>
                    }
                    else if (trainingBegin)
                    {
                        <button class="btn btn-success">Training ( Loss @loss)</button>
                    }
                    else
                    {
                        <button class="btn btn-primary" @onclick="async() => { await Train();}">Train</button>
                    }
                    
                }
                else
                {
                    <div class="alert alert-warning" role="alert">
                        @if (ImageClassView.Classes.Count <= 1)
                        {
                            <p>Add Atleast 2 Classes To Train Model</p>
                        }
                        else if (Class != null)
                        {
                            <p>Class "@Class.ClassName" Contains @Class.Images.Count Images, Atleast 2 Images are required to train</p>
                        }
                    </div>
                }
            }
        </div>
        <div class="card-footer text-muted">
            @if(OnceTrained)
            {
            <div class="alert alert-success">
                Trained On : @imageAddedCount Images Successfully.
                <br />
                Loss Reached To : @loss
            </div>
            }

        </div>
    </div>
</div>

@foreach (var item in ImageClassView.Classes)
{
    foreach (var img in item.Images)
    {
        <img src="@(img.Image)" @ref="img.Reference" style="display:none" />
    }
}

@code
{
    bool IsModelLoaded = false;
    static int imageAddedCount = 0;
    bool IsImageAddedBegin = false;
    bool trainingBegin = false;
    static double loss = 0;
    public static bool OnceTrained = false;

    ElementReference img;
    DotNetObjectReference<ImageTrainView> reference;


    protected override void OnInitialized()
    {
        reference = DotNetObjectReference.Create(this);
        OnLoad();
    }
    async void OnLoad()
    {
        await Runtime.InvokeVoidAsync("CreateFeatureExtractor", reference);
    }
    async Task AddImage(ElementReference image, string label)
    {
        await Runtime.InvokeVoidAsync("AddImage", image, label);
    }
    async Task Train(bool report = true)
    {
        //Add images to NN 
        IsImageAddedBegin = true;
        StateHasChanged();
        await Task.Delay(1);
        imageAddedCount = 0;
        foreach (var cls in ImageClassView.Classes)
            foreach (var img in cls.Images)
            {
                imageAddedCount++;
                await AddImage(img.Reference, cls.ClassName);
                StateHasChanged();
                await Task.Delay(1);
            }
        IsImageAddedBegin = false;
        StateHasChanged();
        await Task.Delay(1);
        await Runtime.InvokeVoidAsync("Train", reference, report);
        trainingBegin = true;
        StateHasChanged();
        await Task.Delay(1);
    }

    [JSInvokable("ICModelLoad")]
    public void ModelLoaded()
    {
        IsModelLoaded = true;
        StateHasChanged();
    }
    [JSInvokable("ICTrain")]
    public async void OnTrain(string loss)
    {
        if(string.IsNullOrWhiteSpace(loss))
        {
            trainingBegin = false;
            OnceTrained = true;
            TrainingDone?.Invoke();
        }
        else
        {
            ImageTrainView.loss = double.Parse(loss);
        }
        //Console.WriteLine(loss);
        StateHasChanged();
        await Task.Delay(1);
    }
    public void Refresh()
    {
        StateHasChanged();
    }

    public delegate void TrainingDoneHandler();
    public event TrainingDoneHandler TrainingDone;
    int imagesCount => ImageClassView.Classes.Select(x => x.Images.Count).Sum();
}

