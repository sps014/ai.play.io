<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: rgb(43, 43, 43); color: rgb(186, 186, 186);"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name" style="color: rgb(203, 120, 50);">div</span>&gt;</span>Teachable Machine Image Model<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: rgb(203, 120, 50);">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: rgb(203, 120, 50);">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string" style="color: rgb(224, 196, 108);">"button"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string" style="color: rgb(224, 196, 108);">"init()"</span>&gt;</span>Start<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: rgb(203, 120, 50);">button</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: rgb(203, 120, 50);">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string" style="color: rgb(224, 196, 108);">"webcam-container"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name" style="color: rgb(203, 120, 50);">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: rgb(203, 120, 50);">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string" style="color: rgb(224, 196, 108);">"label-container"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name" style="color: rgb(203, 120, 50);">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: rgb(203, 120, 50);">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string" style="color: rgb(224, 196, 108);">"https://cdn.jsdelivr.net/npm/@@tensorflow/tfjs@1.3.1/dist/tf.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name" style="color: rgb(203, 120, 50);">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: rgb(203, 120, 50);">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string" style="color: rgb(224, 196, 108);">"https://cdn.jsdelivr.net/npm/@@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name" style="color: rgb(203, 120, 50);">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: rgb(203, 120, 50);">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string" style="color: rgb(224, 196, 108);">"text/javascript"</span>&gt;</span><span class="javascript">
<span class="hljs-comment" style="color: rgb(127, 127, 127);">// More API functions here:</span>
<span class="hljs-comment" style="color: rgb(127, 127, 127);">// https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image</span>

<span class="hljs-comment" style="color: rgb(127, 127, 127);">// the link to your model provided by Teachable Machine export panel</span>
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">const</span> URL = <span class="hljs-string" style="color: rgb(224, 196, 108);">"./my_model/"</span>;

<span class="hljs-keyword" style="color: rgb(203, 120, 50);">let</span> model, webcam, labelContainer, maxPredictions;

<span class="hljs-comment" style="color: rgb(127, 127, 127);">// Load the image model and setup the webcam</span>
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">async</span> <span class="hljs-function"><span class="hljs-keyword" style="color: rgb(203, 120, 50);">function</span> <span class="hljs-title">init</span>(<span class="hljs-params" style="color: rgb(185, 185, 185);"></span>) </span>{
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">const</span> modelURL = URL + <span class="hljs-string" style="color: rgb(224, 196, 108);">"model.json"</span>;
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">const</span> metadataURL = URL + <span class="hljs-string" style="color: rgb(224, 196, 108);">"metadata.json"</span>;

<span class="hljs-comment" style="color: rgb(127, 127, 127);">// load the model and metadata</span>
<span class="hljs-comment" style="color: rgb(127, 127, 127);">// Refer to tmImage.loadFromFiles() in the API to support files from a file picker</span>
<span class="hljs-comment" style="color: rgb(127, 127, 127);">// or files from your local hard drive</span>
<span class="hljs-comment" style="color: rgb(127, 127, 127);">// <span class="hljs-doctag">Note:</span> the pose library adds "tmImage" object to your window (window.tmImage)</span>
        model = <span class="hljs-keyword" style="color: rgb(203, 120, 50);">await</span> tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

<span class="hljs-comment" style="color: rgb(127, 127, 127);">// Convenience function to setup a webcam</span>
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">const</span> flip = <span class="hljs-literal" style="color: rgb(104, 150, 186);">true</span>; <span class="hljs-comment" style="color: rgb(127, 127, 127);">// whether to flip the webcam</span>
        webcam = <span class="hljs-keyword" style="color: rgb(203, 120, 50);">new</span> tmImage.Webcam(<span class="hljs-number" style="color: rgb(104, 150, 186);">200</span>, <span class="hljs-number" style="color: rgb(104, 150, 186);">200</span>, flip); <span class="hljs-comment" style="color: rgb(127, 127, 127);">// width, height, flip</span>
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">await</span> webcam.setup(); <span class="hljs-comment" style="color: rgb(127, 127, 127);">// request access to the webcam</span>
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">await</span> webcam.play();
<span class="hljs-built_in" style="color: rgb(224, 196, 108);">window</span>.requestAnimationFrame(loop);

<span class="hljs-comment" style="color: rgb(127, 127, 127);">// append elements to the DOM</span>
<span class="hljs-built_in" style="color: rgb(224, 196, 108);">document</span>.getElementById(<span class="hljs-string" style="color: rgb(224, 196, 108);">"webcam-container"</span>).appendChild(webcam.canvas);
        labelContainer = <span class="hljs-built_in" style="color: rgb(224, 196, 108);">document</span>.getElementById(<span class="hljs-string" style="color: rgb(224, 196, 108);">"label-container"</span>);
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">for</span> (<span class="hljs-keyword" style="color: rgb(203, 120, 50);">let</span> i = <span class="hljs-number" style="color: rgb(104, 150, 186);">0</span>; i &lt; maxPredictions; i++) { <span class="hljs-comment" style="color: rgb(127, 127, 127);">// and class labels</span>
            labelContainer.appendChild(<span class="hljs-built_in" style="color: rgb(224, 196, 108);">document</span>.createElement(<span class="hljs-string" style="color: rgb(224, 196, 108);">"div"</span>));
        }
    }

<span class="hljs-keyword" style="color: rgb(203, 120, 50);">async</span> <span class="hljs-function"><span class="hljs-keyword" style="color: rgb(203, 120, 50);">function</span> <span class="hljs-title">loop</span>(<span class="hljs-params" style="color: rgb(185, 185, 185);"></span>) </span>{
        webcam.update(); <span class="hljs-comment" style="color: rgb(127, 127, 127);">// update the webcam frame</span>
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">await</span> predict();
<span class="hljs-built_in" style="color: rgb(224, 196, 108);">window</span>.requestAnimationFrame(loop);
    }

<span class="hljs-comment" style="color: rgb(127, 127, 127);">// run the webcam image through the image model</span>
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">async</span> <span class="hljs-function"><span class="hljs-keyword" style="color: rgb(203, 120, 50);">function</span> <span class="hljs-title">predict</span>(<span class="hljs-params" style="color: rgb(185, 185, 185);"></span>) </span>{
<span class="hljs-comment" style="color: rgb(127, 127, 127);">// predict can take in an image, video or canvas html element</span>
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">const</span> prediction = <span class="hljs-keyword" style="color: rgb(203, 120, 50);">await</span> model.predict(webcam.canvas);
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">for</span> (<span class="hljs-keyword" style="color: rgb(203, 120, 50);">let</span> i = <span class="hljs-number" style="color: rgb(104, 150, 186);">0</span>; i &lt; maxPredictions; i++) {
<span class="hljs-keyword" style="color: rgb(203, 120, 50);">const</span> classPrediction =
                prediction[i].className + <span class="hljs-string" style="color: rgb(224, 196, 108);">": "</span> + prediction[i].probability.toFixed(<span class="hljs-number" style="color: rgb(104, 150, 186);">2</span>);
            labelContainer.childNodes[i].innerHTML = classPrediction;
        }
    }
</span><span class="hljs-tag">&lt;/<span class="hljs-name" style="color: rgb(203, 120, 50);">script</span>&gt;</span></span></pre>