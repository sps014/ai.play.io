@inject IJSRuntime Runtime
<div class="col-md-4" style="padding-top: 20px;">
    <div class="card text-center">
  <div class="card-header">
    <h5>Preview</h5>
  </div>
       
  <div class="card-body">
      @if (imageToClassify != null)
      {
          <img src="@imageToClassify" @ref="imageRef" style="width:100%" />
      }
      else if (ImageTrainView.OnceTrained)
      {
          <div class="alert alert-success">
              Please click on Predict button to select image and predict image's class.
          </div>
      }
      <br />
      <br />
      @if (ImageTrainView.OnceTrained)
      {
          <span class="btn btn-primary btn-file">
              Predict      <InputFile OnChange="OnInputFileChange" />

          </span>
      }
      else
      {
          <div class="alert alert-warning">
              You must train a model on the left before you can preview it here.
          </div>
      }


  </div>
  <div class="card-footer text-muted">
      <ul class="list-group">
          @if (results != null)
          {
              foreach (var item in results)
              {
                  <li class="list-group-item">
                      <p>@item.label</p>
                      <p>@item.confidence</p>
                  </li>
              }
          }
      </ul>
  </div>
</div>
</div>

@code 
{
    DotNetObjectReference<ImageResultView> DotNetObject;
    string imageToClassify = null;
    ElementReference imageRef;
    ClassResult[] results = null;

    protected override void OnInitialized()
    {
        DotNetObject = DotNetObjectReference.Create(this);
    }
    async Task Classify()
    {
        await Runtime.InvokeVoidAsync("Classify", DotNetObject, imageRef);
    }
    [JSInvokable("ICClassify")]
    public void ICClassify(ClassResult[] results)
    {
        if (results == null)
            return;

        foreach (var item in results)
        {
            Console.WriteLine(item.label + "   ->   " + item.confidence);
        }
        this.results = results.OrderByDescending(x => x.confidence).ToArray();
       
        StateHasChanged();
    }
    public void Refresh()
    {
        StateHasChanged();
    }

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();

        var format = "image/png";
        foreach (var imageFile in imageFiles)
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            imageToClassify = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        }

        StateHasChanged();

        if (imageToClassify != null)
            await Classify();
    }

    public class ClassResult
    {
        public string label { get; set; }
        public double confidence { get; set; }
    }
}

<style>
    .btn-file {
        position: relative;
        overflow: hidden;
    }

        .btn-file input[type=file] {
            position: absolute;
            top: 0;
            right: 0;
            min-width: 100%;
            min-height: 100%;
            font-size: 100px;
            text-align: right;
            filter: alpha(opacity=0);
            opacity: 0;
            outline: none;
            background: white;
            cursor: inherit;
            display: block;
        }
</style>