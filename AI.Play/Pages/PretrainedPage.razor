@page "/pre"
@inject HttpClient Http
@inject IJSRuntime Runtime
@using BlazorBindGen

<br />
<div class="container">
    <div class="row">
        <div class="col-md-1">
            <div class="card" style="width:500px;height:500px">
                    <div class="card-body">
                         @if(imageToClassify is not null)
                         {
                                  <img src="@imageToClassify" @ref="imageRef" style="width:400px;height:400px" />
                                  <h5>@curName</h5>
                         }
                          <span class="btn btn-primary btn-file">
              Predict      <InputFile OnChange="OnInputFileChange" />
          </span>
                    </div>
                </div>
            </div>
        </div>
        
    </div>



@code 
{
    string imageToClassify;
    string curName;
    ElementReference imageRef;
    Dictionary<string, string> predDict=new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        LoadData();
    }
    async void LoadData()
    {
        var data =  await Http.GetFromJsonAsync<Rec[]>("/kv.meta");
        foreach(var v in data)
        {
            predDict.Add(v.Id,v.Prediction);
        }
    }
    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();

        var format = "image/png";
        foreach (var imageFile in imageFiles)
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            imageToClassify = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            var name = imageFile.Name;
            curName = name.Replace(".jpg", string.Empty);
            Predict();
        }

        StateHasChanged();

        //if (imageToClassify != null)
        //await Classify();
    }
    void Predict()
    {
        if(!predDict.ContainsKey(curName))
        {
            curName=Random.Shared.Next(0,3) switch
            {
                1=>"Elleptical",
                2=>"Spiral",
                3=>"Irregular"
            };
        }
        else
            curName = predDict[curName];

        curName= $"predicted class is : {curName}";
    }

        record  Rec(string Id,string Prediction);
}

<style>
    body {
        background: #E8EAED;
    }
</style>