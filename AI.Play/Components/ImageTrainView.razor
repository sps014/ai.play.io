@inject IJSRuntime Runtime
<div class="col-md-4" style="padding-top: 20px;">
    <div class="card text-center">
        <div class="card-header">
            <h5>Train</h5>
        </div>
        <div class="card-body">
            <h5 class="card-title">WEBGL TRAIN</h5>
            <p class="card-text">
                @if(!IsModelLoaded)
                {
                <button class="btn btn-primary" type="button" disabled>
                <span
                    class="spinner-border spinner-border-sm"
                    aria-hidden="true"
                    role="status"></span>
                  Loading Model...
                </button>
                }
                else
                {
                    <button class="btn btn-primary" type="button">Train</button>
                }
                With supporting text below as a natural lead-in to additional content.
            </p>
            <a href="#" class="btn btn-primary">Train</a>
        </div>
        <div class="card-footer text-muted">
            2 days ago
        </div>
    </div>
</div>

@foreach (var item in ImageClassView.Classes)
{
    foreach (var img in item.Images)
    {
        <img src="@(img.Image)" @ref="img.Reference" style="display:none" />
    }
}

@code
{
    bool IsModelLoaded = false;
    ElementReference img;
    DotNetObjectReference<ImageTrainView> reference;
    protected override void OnInitialized()
    {
        reference = DotNetObjectReference.Create(this);
        OnLoad();
    }
    async void OnLoad()
    {
        await Runtime.InvokeVoidAsync("CreateFeatureExtractor", reference);
    }
    async void AddImage(ElementReference image, string label)
    {
        await Runtime.InvokeVoidAsync("AddImage", image, label);
    }
    async void Train(bool report = true)
    {
        await Runtime.InvokeVoidAsync("Train", reference, report);
    }

    [JSInvokable("ICModelLoad")]
    public void ModelLoaded()
    {
        IsModelLoaded = true;
        StateHasChanged();
        for (int i = 0; i < 20; i++)
            AddImage(img, "dog");
    }
    [JSInvokable("ICTrain")]
    public void OnTrain(string loss)
    {
        Console.WriteLine(loss);
    }
}

