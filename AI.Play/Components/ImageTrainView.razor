@inject IJSRuntime Runtime
<div class="col-md-4" style="padding-top: 20px;">
    <div class="card text-center">
        <div class="card-header">
            <h5>Train</h5>
        </div>
        <div class="card-body">
            <h5 class="card-title">@imagesCount Images</h5>
            <p class="card-text">
                <br />


            </p>
            @if (!IsModelLoaded)
            {
                <button class="btn btn-danger" type="button" disabled>
                    <span class="spinner-border spinner-border-sm"
                          aria-hidden="true"
                          role="status"></span>
                    Loading Model...
                </button>
            }
            else
            {
                var valid = true && ImageClassView.Classes.Count >= 2;
                ImageClassContainer Class = null;
                foreach (var item in ImageClassView.Classes)
                {
                    if (item.Images.Count <= 1)
                    {
                        valid = false;
                        Class = item;
                        break;
                    }
                }
                if (valid)
                {
                    <button class="btn btn-primary" @onclick="()=>{Train();}">Train</button>
                }
                else
                {
                    <div class="alert alert-danger" role="alert">
                        @if(ImageClassView.Classes.Count<=1)
                        {
                            <p>Add Atleast 2 Classes To Train Model</p>
                        }
                        else if(Class!=null)
                        {
                            <p>Class @Class.ClassName Contains only @Class.Images.Count Images, Atleast 2 Images are required to train</p>
                        }
                    </div>
                }
            }
        </div>
        <div class="card-footer text-muted">
            2 days ago
        </div>
    </div>
</div>

@foreach (var item in ImageClassView.Classes)
{
    foreach (var img in item.Images)
    {
        <img src="@(img.Image)" @ref="img.Reference" style="display:none" />
    }
}

@code
{
    bool IsModelLoaded = false;
    ElementReference img;
    DotNetObjectReference<ImageTrainView> reference;
    protected override void OnInitialized()
    {
        reference = DotNetObjectReference.Create(this);
        OnLoad();
    }
    async void OnLoad()
    {
        await Runtime.InvokeVoidAsync("CreateFeatureExtractor", reference);
    }
    async Task AddImage(ElementReference image, string label)
    {
        await Runtime.InvokeVoidAsync("AddImage", image, label);
    }
    async void Train(bool report = true)
    {
        //Add images to NN
        foreach (var cls in ImageClassView.Classes)
            foreach (var img in cls.Images)
                await AddImage(img.Reference, cls.ClassName);
        await Runtime.InvokeVoidAsync("Train", reference, report);
    }

    [JSInvokable("ICModelLoad")]
    public void ModelLoaded()
    {
        IsModelLoaded = true;
        StateHasChanged();
    }
    [JSInvokable("ICTrain")]
    public void OnTrain(string loss)
    {
        Console.WriteLine(loss);
    }
    int imagesCount => ImageClassView.Classes.Select(x => x.Images.Count).Sum();
}

