@page "/ic/c/{Index}"
<br/>

<div class="card" style="width:96%;margin-left: 2%;margin-right: 2%;">
    <div class="card-body">
        <h5 class="card-title">Data Warehouse</h5>
        <br />
        <p class="margin-left:60px;">Class Name : </p>
        <input class="form-control" type="text" @bind-value="Class.ClassName"
               style="min-width: 100px;position:relative;margin-left:105px;margin-top:-50px;max-width:200px;outline-color:dodgerblue;" />
        <br />
        <div class="btn-group shadow-0" role="group" aria-label="Basic example">
            <span class="btn btn-primary btn-file">
                Add Images      <InputFile OnChange="OnInputFileChange" multiple />

            </span>
        </div>
        <br />
        <br />
        <div class="lightbox">

            @for (int i = 0; i <= Class.Images.Count / ColCount; i++)
            {
                <div class="row">

                    @for (int j = 0; j < ColCount; j++)
                    {
                        int ind = i * ColCount + j;
                        if (ind >= Class.Images.Count)
                            break;
                        <div class="col-lg-3">
                            <img src="@Class.Images[ind].Image"
                                 data-img="@Class.Images[ind].Image"
                                 alt="Lightbox image 1" style="width:100%"
                                 class="w-100 shadow-1-strong rounded" />
                        </div>
                    }
                </div>
                <br />
            }

        </div>
    </div>
    </div>

@code
{
    int ColCount = 4;
    [Parameter]
    public string Index { get; set; }
    int i => int.Parse(Index);
    ImageClassContainer Class => ImageClassView.Classes[i];
    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();

        var format = "image/png";
        foreach (var imageFile in imageFiles)
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 400, 400);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            Class.Images.Add(new ImageRefs() { Image = imageDataUrl });
        }

        StateHasChanged();
    }

}


<style>
    body {
        background: #E8EAED;
    }

    .btn-file {
        position: relative;
        overflow: hidden;
    }

    .btn-file input[type=file] {
        position: absolute;
        top: 0;
        right: 0;
        min-width: 100%;
        min-height: 100%;
        font-size: 100px;
        text-align: right;
        filter: alpha(opacity=0);
        opacity: 0;
        outline: none;
        background: white;
        cursor: inherit;
        display: block;
    }
</style>
